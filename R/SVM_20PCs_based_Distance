if(!require("e1071")) stop("Please install ggplot2 packages")

suppressMessages(library(e1071))
args = commandArgs(TRUE)
if( length(args) != 2 ) stop("please provide two arguments (prefix and reference phe file)")

prefix <- args[1]
phefile <- args[2]

pc <- read.table(paste0(prefix, "pc.txt"), header = TRUE)
phe <- read.table(phefile, header = TRUE)

# 
eigvalue <- read.table(paste0(prefix,"EigenValues.txt"))
#
train.data <- pc[pc$AFF == 1, grep("IID|PC", colnames(pc))]
eigvalue <- as.matrix(eigvalue)

disfunc <- function(i){
  df <- pc[i, grep("PC", colnames(pc))]
  diff <- df[rep(1, each = nrow(train.data)), ] - train.data[,grep("PC", colnames(train.data))]
  newdf.one <- eigvalue%*%t(as.matrix(diff^2))
  return(newdf.one)
}

newdf <- t(sapply(1:nrow(pc), disfunc))
train.x <- newdf [1:nrow(train.data),]
train.y <- phe[, "Population"]


pop <- phe[, c("IID", "Population")]
train.phe <- merge(train.data, pop, by = "IID")

test.data.ids <- pc[pc$AFF == 2, c("FID","IID")]
test.data <- cbind(test.data.ids, newdf[-c(1:nrow(train.data)), ])


if(require("doParallel", quietly=TRUE)){
  numCores <- detectCores()
  registerDoParallel(cores = min(round(numCores/2),41))
  tuneresults <- function(cost){
    tuneresult <- foreach(cost = cost, .combine = c) %dopar% {
      set.seed(123)
      mod = tune(svm, train.x, as.factor(train.y), kernel = "linear", cost = cost, probability = TRUE)
      mod$performances[,c("error")]
    }
    best.cost <- cost[which.min(tuneresult)]
    return(best.cost)}
}else{
  numCores <- 2
  tuneresults <- function(cost) {
    set.seed(123)
    tune.mod = tune(svm, train.x, as.factor(train.y), kernel = "linear",
                    ranges=(list(cost=cost)), probability = TRUE)
    return(tune.mod$best.parameters[1,1])}}

print(paste("Assign", min(round(numCores/2),41), "cores for the grid search."))
print(paste("Grid search with a wide range, starts at", date()))
best.cost <- tuneresults(2^(seq(-10, 10, by = 0.5)))
print(paste("Grid search with a wide range, ends at", date()))
print(paste("The best cost is", round(best.cost, 6), "after the wide grid search"))
print(paste("Grid search with a small range, starts at", date()))
more.cost <- 2^seq(log2(best.cost) - 0.5, log2(best.cost) + 0.5, by = 0.05)
best.cost <- tuneresults(more.cost)
print(paste("Grid search with a small range, ends at", date()))
print(paste("The best cost is", round(best.cost, 6), "after the small grid search"))
set.seed(123)
mymod <- svm(train.x, as.factor(train.y), cost = best.cost, kernel = "linear", probability=TRUE)
print(paste("Predict ancestry information, start at", date()))
pred.pop <- predict(mymod, test.data[, !colnames(test.data) %in%c("FID","IID")], probability=TRUE)
test.data$PRED <- pred.pop
class.prob <- attr(pred.pop, "probabilities")
print(paste("Prepare the summary file, starts at", date()))
orders <- t(apply(class.prob, 1, function(x) order(x, decreasing=T)))
orders.class <- t(apply(orders, 1, function(x) colnames(class.prob)[x]))
orders.probs <- t(sapply(1:nrow(class.prob), function(x) class.prob[x, orders[x,]]))
check.cumsum <- t(apply(orders.probs, 1, cumsum))
temp <- apply(check.cumsum, 1, function(x) which(x > 0.65)[1])
pred_class <- sapply(1:length(temp), function (x) paste(orders.class[x, 1:as.numeric(temp[x])], collapse = ";"))
pred_prob <- sapply(1:length(temp), function (x) paste(round(orders.probs[x, 1:as.numeric(temp[x])], 3), collapse = ";"))
pred.out <- cbind(test.data[, c("FID", "IID")], pred_class, pred_prob, orders.class[, 1], orders.class[, 2], round(orders.probs[, 1], 3), round(orders.probs[, 2], 3))
colnames(pred.out)[3:8] <- c("Ancestry", "Pr_Anc", "Anc_1st", "Anc_2nd", "Pr_1st", "Pr_2nd")

min.test <- newdf[-c(1:nrow(train.data)),]
min.test.index <- apply(min.test,1, function(x) which.min(x))
MinDisGrp  <- phe[min.test.index,"Population"]
pred.out <- cbind(pred.out, MinDisGrp)
print(paste("summary file is ready ", date()))
write.table(pred.out, paste0(prefix, "_InferredAncestry_PC_DistanceSVM.txt"), sep = "\t", quote = FALSE, row.names = FALSE)
print(paste("Results are saved to", paste0(prefix, "_InferredAncestry_PC_DistanceSVM.txt")))
